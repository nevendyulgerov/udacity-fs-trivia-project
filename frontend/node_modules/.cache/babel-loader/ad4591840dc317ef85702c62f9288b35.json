{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\sofiahardcode\\\\udacity-fullstack-nanodegree-vm\\\\vagrant\\\\trivia_api\\\\frontend\\\\src\\\\components\\\\FormView.js\";\nimport React, { Component } from 'react';\nimport { getCategories, createQuestion } from '../api';\nimport '../stylesheets/FormView.css';\n\nclass FormView extends Component {\n  constructor() {\n    super();\n\n    this.submitQuestion = event => {\n      event.preventDefault();\n      const {\n        question,\n        answer,\n        difficulty,\n        category\n      } = this.state;\n      const questionBody = {\n        question,\n        answer,\n        difficulty,\n        category\n      };\n      createQuestion(questionBody).then(() => {\n        document.getElementById(\"add-question-form\").reset();\n      }).catch(() => {\n        alert('Unable to add question. Please try your request again');\n      });\n      /*\n      $.ajax({\n          url: '/questions', //TODO: update request URL\n          type: \"POST\",\n          dataType: 'json',\n          contentType: 'application/json',\n          data: JSON.stringify({\n              question: this.state.question,\n              answer: this.state.answer,\n              difficulty: this.state.difficulty,\n              category: this.state.category\n          }),\n          xhrFields: {\n              withCredentials: true\n          },\n          crossDomain: true,\n          success: (result) => {\n              document.getElementById(\"add-question-form\").reset();\n              return;\n          },\n          error: (error) => {\n              alert('Unable to add question. Please try your request again')\n              return;\n          }\n      })\n      */\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      question: '',\n      answer: '',\n      difficulty: 1,\n      category: 1,\n      categories: {}\n    };\n  }\n\n  componentDidMount() {\n    getCategories().then(result => {\n      this.setState({\n        categories: result.categories\n      });\n    }).catch(() => {\n      alert('Unable to load categories. Please try your request again');\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"add-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"Add a New Trivia Question\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-view\",\n      id: \"add-question-form\",\n      onSubmit: this.submitQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Question\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"question\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, \"Answer\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"answer\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"Difficulty\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"difficulty\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }, \"5\"))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, \"Category\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"category\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, Object.keys(this.state.categories).map(id => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: id,\n        value: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 37\n        }\n      }, this.state.categories[id]);\n    }))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default FormView;","map":{"version":3,"sources":["C:/repos/sofiahardcode/udacity-fullstack-nanodegree-vm/vagrant/trivia_api/frontend/src/components/FormView.js"],"names":["React","Component","getCategories","createQuestion","FormView","constructor","submitQuestion","event","preventDefault","question","answer","difficulty","category","state","questionBody","then","document","getElementById","reset","catch","alert","handleChange","setState","target","name","value","categories","componentDidMount","result","render","Object","keys","map","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { getCategories, createQuestion } from '../api';\nimport '../stylesheets/FormView.css';\n\nclass FormView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            question: '',\n            answer: '',\n            difficulty: 1,\n            category: 1,\n            categories: {}\n        }\n    }\n\n    componentDidMount() {\n        getCategories()\n            .then((result) => {\n                this.setState({\n                    categories: result.categories\n                });\n            })\n            .catch(() => {\n                alert('Unable to load categories. Please try your request again');\n            });\n    }\n\n\n    submitQuestion = (event) => {\n        event.preventDefault();\n        const { question, answer, difficulty, category } = this.state;\n        const questionBody = {\n            question,\n            answer,\n            difficulty,\n            category\n        };\n\n        createQuestion(questionBody)\n            .then(() => {\n                document.getElementById(\"add-question-form\").reset();\n            })\n            .catch(() => {\n                alert('Unable to add question. Please try your request again');\n            });\n\n        /*\n        $.ajax({\n            url: '/questions', //TODO: update request URL\n            type: \"POST\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\n                question: this.state.question,\n                answer: this.state.answer,\n                difficulty: this.state.difficulty,\n                category: this.state.category\n            }),\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            success: (result) => {\n                document.getElementById(\"add-question-form\").reset();\n                return;\n            },\n            error: (error) => {\n                alert('Unable to add question. Please try your request again')\n                return;\n            }\n        })\n        */\n    };\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    };\n\n    render() {\n        return (\n            <div id=\"add-form\">\n                <h2>Add a New Trivia Question</h2>\n                <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\n                    <label>\n                        Question\n                        <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\n                    </label>\n                    <label>\n                        Answer\n                        <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\n                    </label>\n                    <label>\n                        Difficulty\n                        <select name=\"difficulty\" onChange={this.handleChange}>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                        </select>\n                    </label>\n                    <label>\n                        Category\n                        <select name=\"category\" onChange={this.handleChange}>\n                            {Object.keys(this.state.categories).map(id => {\n                                return (\n                                    <option key={id} value={id}>{this.state.categories[id]}</option>\n                                )\n                            })}\n                        </select>\n                    </label>\n                    <input type=\"submit\" className=\"button\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default FormView;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\sofiahardcode\\\\udacity-fullstack-nanodegree-vm\\\\vagrant\\\\trivia_api\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport { getQuestions, getCategoryQuestions, searchQuestions, deleteQuestion } from '../api';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      const {\n        page\n      } = this.state;\n      getQuestions(page, this.perPage).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.getByCategory = id => {\n      getCategoryQuestions(id).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      searchQuestions(searchTerm).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE' && window.confirm('are you sure you want to delete the question?')) {\n        deleteQuestion(id).then(this.getQuestions).catch(() => {\n          alert('Unable to load questions. Please try your request again');\n        });\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n    this.perPage = 2;\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / this.perPage);\n    console.log(maxPage);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: i,\n        className: `page-num ${i === this.state.page ? 'active' : ''}`,\n        onClick: () => this.selectPage(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"categories-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      onClick: this.getQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.categories).map(id => /*#__PURE__*/React.createElement(\"li\", {\n      key: id,\n      onClick: () => this.getByCategory(id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, this.state.categories[id], /*#__PURE__*/React.createElement(\"img\", {\n      className: \"category\",\n      src: `${this.state.categories[id]}.svg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, \"Questions\"), this.state.questions.map(q => /*#__PURE__*/React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:/repos/sofiahardcode/udacity-fullstack-nanodegree-vm/vagrant/trivia_api/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","getQuestions","getCategoryQuestions","searchQuestions","deleteQuestion","QuestionView","constructor","page","state","perPage","then","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","catch","alert","getByCategory","id","submitSearch","searchTerm","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","console","log","i","push","render","Object","keys","map","q","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport { getQuestions, getCategoryQuestions, searchQuestions, deleteQuestion } from '../api';\n\nclass QuestionView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            questions: [],\n            page: 1,\n            totalQuestions: 0,\n            categories: {},\n            currentCategory: null,\n        };\n        this.perPage = 2;\n    }\n\n    componentDidMount() {\n        this.getQuestions();\n    }\n\n    getQuestions = () => {\n        const { page } = this.state;\n\n        getQuestions(page, this.perPage)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    categories: result.categories,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again');\n            });\n    };\n\n    selectPage(num) {\n        this.setState({page: num}, () => this.getQuestions());\n    }\n\n    createPagination() {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(this.state.totalQuestions / this.perPage);\n\n        console.log(maxPage);\n\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers.push(\n                <span\n                    key={i}\n                    className={`page-num ${i === this.state.page ? 'active' : ''}`}\n                    onClick={() => this.selectPage(i)}\n                >\n                    {i}\n                </span>\n            )\n        }\n        return pageNumbers;\n    }\n\n    getByCategory = (id) => {\n        getCategoryQuestions(id)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again')\n            });\n    };\n\n    submitSearch = (searchTerm) => {\n        searchQuestions(searchTerm)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again')\n            });\n    };\n\n    questionAction = (id) => (action) => {\n        if (action === 'DELETE' && window.confirm('are you sure you want to delete the question?')) {\n            deleteQuestion(id)\n                .then(this.getQuestions)\n                .catch(() => {\n                    alert('Unable to load questions. Please try your request again')\n                });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"question-view\">\n                <div className=\"categories-list\">\n                    <h2 onClick={this.getQuestions}>\n                        Categories\n                    </h2>\n\n                    <ul>\n                        {Object.keys(this.state.categories).map((id,) => (\n                            <li\n                                key={id}\n                                onClick={() => this.getByCategory(id)}\n                            >\n                                {this.state.categories[id]}\n\n                                <img\n                                    className=\"category\"\n                                    src={`${this.state.categories[id]}.svg`}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <Search submitSearch={this.submitSearch}/>\n                </div>\n\n                <div className=\"questions-list\">\n                    <h2>Questions</h2>\n\n                    {this.state.questions.map((q) => (\n                        <Question\n                            key={q.id}\n                            question={q.question}\n                            answer={q.answer}\n                            category={this.state.categories[q.category]}\n                            difficulty={q.difficulty}\n                            questionAction={this.questionAction(q.id)}\n                        />\n                    ))}\n\n                    <div className=\"pagination-menu\">\n                        {this.createPagination()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}
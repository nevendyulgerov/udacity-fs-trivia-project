{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\sofiahardcode\\\\udacity-fullstack-nanodegree-vm\\\\vagrant\\\\trivia_api\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\nimport { getQuestions, getCategoryQuestions, searchQuestions, deleteQuestion } from '../api';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      const {\n        page\n      } = this.state;\n      getQuestions(page).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.getByCategory = id => {\n      getCategoryQuestions(id).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      searchQuestions(searchTerm).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category\n        });\n      }).catch(() => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE' && window.confirm('are you sure you want to delete the question?')) {\n        deleteQuestion(id).then(this.getQuestions).catch(() => {\n          alert('Unable to load questions. Please try your request again');\n        });\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: i,\n        className: `page-num ${i === this.state.page ? 'active' : ''}`,\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"categories-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.categories).map(id => /*#__PURE__*/React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, this.state.categories[id], /*#__PURE__*/React.createElement(\"img\", {\n      className: \"category\",\n      src: `${this.state.categories[id]}.svg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, \"Questions\"), this.state.questions.map((q, ind) => /*#__PURE__*/React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:/repos/sofiahardcode/udacity-fullstack-nanodegree-vm/vagrant/trivia_api/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","getQuestions","getCategoryQuestions","searchQuestions","deleteQuestion","QuestionView","constructor","page","state","then","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","catch","alert","getByCategory","id","submitSearch","searchTerm","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","Object","keys","map","q","ind","question","answer","category","difficulty"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAO,wBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,YAAT,EAAuBC,oBAAvB,EAA6CC,eAA7C,EAA8DC,cAA9D,QAAoF,QAApF;;AAEA,MAAMC,YAAN,SAA2BR,SAA3B,CAAqC;AACjCS,EAAAA,WAAW,GAAG;AACV;;AADU,SAedL,YAfc,GAeC,MAAM;AACjB,YAAM;AAAEM,QAAAA;AAAF,UAAW,KAAKC,KAAtB;AAEAP,MAAAA,YAAY,CAACM,IAAD,CAAZ,CACKE,IADL,CACWC,MAAD,IAAY;AACd,aAAKC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAEF,MAAM,CAACE,SADR;AAEVC,UAAAA,cAAc,EAAEH,MAAM,CAACI,eAFb;AAGVC,UAAAA,UAAU,EAAEL,MAAM,CAACK,UAHT;AAIVC,UAAAA,eAAe,EAAEN,MAAM,CAACO;AAJd,SAAd;AAMH,OARL,EASKC,KATL,CASW,MAAM;AACTC,QAAAA,KAAK,CAAC,yDAAD,CAAL;AACH,OAXL;AAYH,KA9Ba;;AAAA,SAoDdC,aApDc,GAoDGC,EAAD,IAAQ;AACpBnB,MAAAA,oBAAoB,CAACmB,EAAD,CAApB,CACKZ,IADL,CACWC,MAAD,IAAY;AACd,aAAKC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAEF,MAAM,CAACE,SADR;AAEVC,UAAAA,cAAc,EAAEH,MAAM,CAACI,eAFb;AAGVE,UAAAA,eAAe,EAAEN,MAAM,CAACO;AAHd,SAAd;AAKH,OAPL,EAQKC,KARL,CAQW,MAAM;AACTC,QAAAA,KAAK,CAAC,yDAAD,CAAL;AACH,OAVL;AAWH,KAhEa;;AAAA,SAkEdG,YAlEc,GAkEEC,UAAD,IAAgB;AAC3BpB,MAAAA,eAAe,CAACoB,UAAD,CAAf,CACKd,IADL,CACWC,MAAD,IAAY;AACd,aAAKC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAEF,MAAM,CAACE,SADR;AAEVC,UAAAA,cAAc,EAAEH,MAAM,CAACI,eAFb;AAGVE,UAAAA,eAAe,EAAEN,MAAM,CAACO;AAHd,SAAd;AAKH,OAPL,EAQKC,KARL,CAQW,MAAM;AACTC,QAAAA,KAAK,CAAC,yDAAD,CAAL;AACH,OAVL;AAWH,KA9Ea;;AAAA,SAgFdK,cAhFc,GAgFIH,EAAD,IAASI,MAAD,IAAY;AACjC,UAAIA,MAAM,KAAK,QAAX,IAAuBC,MAAM,CAACC,OAAP,CAAe,+CAAf,CAA3B,EAA4F;AACxFvB,QAAAA,cAAc,CAACiB,EAAD,CAAd,CACKZ,IADL,CACU,KAAKR,YADf,EAEKiB,KAFL,CAEW,MAAM;AACTC,UAAAA,KAAK,CAAC,yDAAD,CAAL;AACH,SAJL;AAKH;AACJ,KAxFa;;AAEV,SAAKX,KAAL,GAAa;AACTI,MAAAA,SAAS,EAAE,EADF;AAETL,MAAAA,IAAI,EAAE,CAFG;AAGTM,MAAAA,cAAc,EAAE,CAHP;AAITE,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,eAAe,EAAE;AALR,KAAb;AAOH;;AAEDY,EAAAA,iBAAiB,GAAG;AAChB,SAAK3B,YAAL;AACH;;AAmBD4B,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,SAAKnB,QAAL,CAAc;AAACJ,MAAAA,IAAI,EAAEuB;AAAP,KAAd,EAA2B,MAAM,KAAK7B,YAAL,EAAjC;AACH;;AAED8B,EAAAA,gBAAgB,GAAG;AACf,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAK3B,KAAL,CAAWK,cAAX,GAA4B,EAAtC,CAAd;;AACA,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,OAArB,EAA8BG,CAAC,EAA/B,EAAmC;AAC/BJ,MAAAA,WAAW,CAACK,IAAZ,eACI;AACI,QAAA,GAAG,EAAED,CADT;AAEI,QAAA,SAAS,EAAG,YAAWA,CAAC,KAAK,KAAK5B,KAAL,CAAWD,IAAjB,GAAwB,QAAxB,GAAmC,EAAG,EAFjE;AAGI,QAAA,OAAO,EAAE,MAAM;AACX,eAAKsB,UAAL,CAAgBO,CAAhB;AACH,SALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKQA,CALR,CADJ;AAQH;;AACD,WAAOJ,WAAP;AACH;;AAwCDM,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,OAAO,EAAE,MAAM;AACf,aAAKrC,YAAL;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKsC,MAAM,CAACC,IAAP,CAAY,KAAKhC,KAAL,CAAWO,UAAvB,EAAmC0B,GAAnC,CAAwCpB,EAAD,iBACpC;AAAI,MAAA,GAAG,EAAEA,EAAT;AAAa,MAAA,OAAO,EAAE,MAAM;AACxB,aAAKD,aAAL,CAAmBC,EAAnB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGK,KAAKb,KAAL,CAAWO,UAAX,CAAsBM,EAAtB,CAHL,eAII;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAG,GAAE,KAAKb,KAAL,CAAWO,UAAX,CAAsBM,EAAtB,CAA0B,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADH,CADL,CAJJ,eAcI,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADJ,eAiBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEK,KAAKd,KAAL,CAAWI,SAAX,CAAqB6B,GAArB,CAAyB,CAACC,CAAD,EAAIC,GAAJ,kBACtB,oBAAC,QAAD;AACI,MAAA,GAAG,EAAED,CAAC,CAACrB,EADX;AAEI,MAAA,QAAQ,EAAEqB,CAAC,CAACE,QAFhB;AAGI,MAAA,MAAM,EAAEF,CAAC,CAACG,MAHd;AAII,MAAA,QAAQ,EAAE,KAAKrC,KAAL,CAAWO,UAAX,CAAsB2B,CAAC,CAACI,QAAxB,CAJd;AAKI,MAAA,UAAU,EAAEJ,CAAC,CAACK,UALlB;AAMI,MAAA,cAAc,EAAE,KAAKvB,cAAL,CAAoBkB,CAAC,CAACrB,EAAtB,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,eAYI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKU,gBAAL,EADL,CAZJ,CAjBJ,CADJ;AAqCH;;AAjIgC;;AAoIrC,eAAe1B,YAAf","sourcesContent":["import React, {Component} from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\nimport { getQuestions, getCategoryQuestions, searchQuestions, deleteQuestion } from '../api';\n\nclass QuestionView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            questions: [],\n            page: 1,\n            totalQuestions: 0,\n            categories: {},\n            currentCategory: null,\n        }\n    }\n\n    componentDidMount() {\n        this.getQuestions();\n    }\n\n    getQuestions = () => {\n        const { page } = this.state;\n\n        getQuestions(page)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    categories: result.categories,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again');\n            });\n    };\n\n    selectPage(num) {\n        this.setState({page: num}, () => this.getQuestions());\n    }\n\n    createPagination() {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(this.state.totalQuestions / 10)\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers.push(\n                <span\n                    key={i}\n                    className={`page-num ${i === this.state.page ? 'active' : ''}`}\n                    onClick={() => {\n                        this.selectPage(i)\n                    }}>{i}\n        </span>)\n        }\n        return pageNumbers;\n    }\n\n    getByCategory = (id) => {\n        getCategoryQuestions(id)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again')\n            });\n    };\n\n    submitSearch = (searchTerm) => {\n        searchQuestions(searchTerm)\n            .then((result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n            })\n            .catch(() => {\n                alert('Unable to load questions. Please try your request again')\n            });\n    };\n\n    questionAction = (id) => (action) => {\n        if (action === 'DELETE' && window.confirm('are you sure you want to delete the question?')) {\n            deleteQuestion(id)\n                .then(this.getQuestions)\n                .catch(() => {\n                    alert('Unable to load questions. Please try your request again')\n                });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"question-view\">\n                <div className=\"categories-list\">\n                    <h2 onClick={() => {\n                        this.getQuestions()\n                    }}>Categories</h2>\n                    <ul>\n                        {Object.keys(this.state.categories).map((id,) => (\n                            <li key={id} onClick={() => {\n                                this.getByCategory(id)\n                            }}>\n                                {this.state.categories[id]}\n                                <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\n                            </li>\n                        ))}\n                    </ul>\n                    <Search submitSearch={this.submitSearch}/>\n                </div>\n                <div className=\"questions-list\">\n                    <h2>Questions</h2>\n                    {this.state.questions.map((q, ind) => (\n                        <Question\n                            key={q.id}\n                            question={q.question}\n                            answer={q.answer}\n                            category={this.state.categories[q.category]}\n                            difficulty={q.difficulty}\n                            questionAction={this.questionAction(q.id)}\n                        />\n                    ))}\n                    <div className=\"pagination-menu\">\n                        {this.createPagination()}\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}
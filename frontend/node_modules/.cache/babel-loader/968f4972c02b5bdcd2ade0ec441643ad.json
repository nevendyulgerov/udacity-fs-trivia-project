{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\sofiahardcode\\\\udacity-fullstack-nanodegree-vm\\\\vagrant\\\\trivia_api\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/QuizView.css';\nimport { getCategories, playQuiz } from '../api';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor() {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const {\n        quizCategory,\n        previousQuestions,\n        currentQuestion\n      } = this.state;\n      const category = quizCategory.type !== 'click' ? quizCategory : null;\n\n      if (currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      playQuiz(category, previousQuestions).then(result => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: typeof result.question !== 'object'\n        });\n      }).catch(() => {\n        alert('Unable to load question. Please try your request again');\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    getCategories().then(result => {\n      this.setState({\n        categories: result.categories\n      });\n    }).catch(() => {\n      alert('Unable to load categories. Please try your request again');\n    });\n  }\n\n  renderPrePlay() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"choose-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Choose Category\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"final-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \" Your Final Score is \", this.state.numCorrect), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \" Play Again?\"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, this.state.currentQuestion.question), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${evaluate ? 'correct' : 'wrong'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, this.state.currentQuestion.answer), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \" Next Question\"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    }, this.state.currentQuestion.question), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:/repos/sofiahardcode/udacity-fullstack-nanodegree-vm/vagrant/trivia_api/frontend/src/components/QuizView.js"],"names":["React","Component","getCategories","playQuiz","questionsPerPlay","QuizView","constructor","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","currentQuestion","state","category","push","then","result","showAnswer","question","guess","forceEnd","catch","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../stylesheets/QuizView.css';\nimport { getCategories, playQuiz } from '../api';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            categories: {},\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false\n        }\n    }\n\n    componentDidMount() {\n        getCategories()\n            .then((result) => {\n                this.setState({\n                    categories: result.categories\n                })\n            })\n            .catch(() => {\n                alert('Unable to load categories. Please try your request again')\n            });\n    }\n\n    selectCategory = ({type, id = 0}) => {\n        this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n    };\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    };\n\n    getNextQuestion = () => {\n        const { quizCategory, previousQuestions, currentQuestion } = this.state;\n        const category = quizCategory.type !== 'click' ? quizCategory : null;\n\n        if (currentQuestion.id) {\n            previousQuestions.push(this.state.currentQuestion.id)\n        }\n\n        playQuiz(category, previousQuestions)\n            .then((result) => {\n                this.setState({\n                    showAnswer: false,\n                    previousQuestions: previousQuestions,\n                    currentQuestion: result.question,\n                    guess: '',\n                    forceEnd: typeof result.question !== 'object'\n                })\n            })\n            .catch(() => {\n                alert('Unable to load question. Please try your request again')\n            });\n    };\n\n    submitGuess = (event) => {\n        event.preventDefault();\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        let evaluate = this.evaluateAnswer()\n        this.setState({\n            numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n            showAnswer: true,\n        });\n    };\n\n    restartGame = () => {\n        this.setState({\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false\n        })\n    };\n\n    renderPrePlay() {\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"choose-header\">Choose Category</div>\n                <div className=\"category-holder\">\n                    <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                    {Object.keys(this.state.categories).map(id => {\n                        return (\n                            <div\n                                key={id}\n                                value={id}\n                                className=\"play-category\"\n                                onClick={() => this.selectCategory({type: this.state.categories[id], id})}>\n                                {this.state.categories[id]}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n\n    renderFinalScore() {\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n                <div className=\"play-again button\" onClick={this.restartGame}> Play Again?</div>\n            </div>\n        )\n    }\n\n    evaluateAnswer = () => {\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n        return answerArray.includes(formatGuess)\n    }\n\n    renderCorrectAnswer() {\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        let evaluate = this.evaluateAnswer()\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n                <div\n                    className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n                <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n                <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question</div>\n            </div>\n        )\n    }\n\n    renderPlay() {\n        return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n            ? this.renderFinalScore()\n            : this.state.showAnswer\n                ? this.renderCorrectAnswer()\n                : (\n                    <div className=\"quiz-play-holder\">\n                        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n                        <form onSubmit={this.submitGuess}>\n                            <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n                            <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\"/>\n                        </form>\n                    </div>\n                )\n    }\n\n\n    render() {\n        return this.state.quizCategory\n            ? this.renderPlay()\n            : this.renderPrePlay()\n    }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}
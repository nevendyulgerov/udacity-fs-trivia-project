{"ast":null,"code":"import $ from 'jquery';\nexport const apiUrl = 'http://localhost:8000/api/v1';\n/**\r\n * @desc Get categories\r\n * @returns {Promise<any>}\r\n */\n\nexport const getCategories = () => {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      url: `${apiUrl}/categories`,\n      type: 'GET',\n      success: resolve,\n      error: reject\n    });\n  });\n};\n/**\r\n * @description Get questions\r\n * @param page\r\n * @returns {Promise<any>}\r\n */\n\nexport const getQuestions = page => {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      url: `${apiUrl}/questions?page=${page}`,\n      type: 'GET',\n      success: resolve,\n      error: reject\n    });\n  });\n};\n/**\r\n * @description Search questions\r\n * @param searchTerm\r\n * @returns {Promise<any>}\r\n */\n\nexport const searchQuestions = searchTerm => {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      url: `${apiUrl}/questions`,\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        searchTerm\n      }),\n      success: resolve,\n      error: reject\n    });\n  });\n};\n/**\r\n * @description Create question\r\n * @param question\r\n * @returns {Promise<any>}\r\n */\n\nexport const createQuestion = question => {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      url: `${apiUrl}/questions`,\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify(question),\n      success: resolve,\n      error: reject\n    });\n  });\n};\n/**\r\n * @description Get category questions\r\n * @param categoryId\r\n * @returns {Promise<any>}\r\n */\n\nexport const getCategoryQuestions = categoryId => {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      url: `${apiUrl}/categories/${categoryId}/questions`,\n      type: 'GET',\n      success: resolve,\n      error: reject\n    });\n  });\n};","map":{"version":3,"sources":["C:/repos/sofiahardcode/udacity-fullstack-nanodegree-vm/vagrant/trivia_api/frontend/src/api.js"],"names":["$","apiUrl","getCategories","Promise","resolve","reject","ajax","url","type","success","error","getQuestions","page","searchQuestions","searchTerm","dataType","contentType","data","JSON","stringify","createQuestion","question","getCategoryQuestions","categoryId"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,MAAM,GAAG,8BAAf;AAEP;;;;;AAIA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAG,GAAEN,MAAO,aADZ;AAEHO,MAAAA,IAAI,EAAE,KAFH;AAGHC,MAAAA,OAAO,EAAEL,OAHN;AAIHM,MAAAA,KAAK,EAAEL;AAJJ,KAAP;AAMH,GAPM,CAAP;AAQH,CATM;AAWP;;;;;;AAKA,OAAO,MAAMM,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAG,GAAEN,MAAO,mBAAkBW,IAAK,EADnC;AAEHJ,MAAAA,IAAI,EAAE,KAFH;AAGHC,MAAAA,OAAO,EAAEL,OAHN;AAIHM,MAAAA,KAAK,EAAEL;AAJJ,KAAP;AAMH,GAPM,CAAP;AAQH,CATM;AAWP;;;;;;AAKA,OAAO,MAAMQ,eAAe,GAAIC,UAAD,IAAgB;AAC3C,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAG,GAAEN,MAAO,YADZ;AAEHO,MAAAA,IAAI,EAAE,MAFH;AAGHO,MAAAA,QAAQ,EAAE,MAHP;AAIHC,MAAAA,WAAW,EAAE,kBAJV;AAKHC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,QAAAA;AADiB,OAAf,CALH;AAQHL,MAAAA,OAAO,EAAEL,OARN;AASHM,MAAAA,KAAK,EAAEL;AATJ,KAAP;AAWH,GAZM,CAAP;AAaH,CAdM;AAgBP;;;;;;AAKA,OAAO,MAAMe,cAAc,GAAIC,QAAD,IAAc;AACxC,SAAO,IAAIlB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAG,GAAEN,MAAO,YADZ;AAEHO,MAAAA,IAAI,EAAE,MAFH;AAGHO,MAAAA,QAAQ,EAAE,MAHP;AAIHC,MAAAA,WAAW,EAAE,kBAJV;AAKHC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,QAAf,CALH;AAMHZ,MAAAA,OAAO,EAAEL,OANN;AAOHM,MAAAA,KAAK,EAAEL;AAPJ,KAAP;AASH,GAVM,CAAP;AAWH,CAZM;AAcP;;;;;;AAKA,OAAO,MAAMiB,oBAAoB,GAAIC,UAAD,IAAgB;AAChD,SAAO,IAAIpB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAG,GAAEN,MAAO,eAAcsB,UAAW,YADrC;AAEHf,MAAAA,IAAI,EAAE,KAFH;AAGHC,MAAAA,OAAO,EAAEL,OAHN;AAIHM,MAAAA,KAAK,EAAEL;AAJJ,KAAP;AAMH,GAPM,CAAP;AAQH,CATM","sourcesContent":["import $ from 'jquery';\r\n\r\nexport const apiUrl = 'http://localhost:8000/api/v1';\r\n\r\n/**\r\n * @desc Get categories\r\n * @returns {Promise<any>}\r\n */\r\nexport const getCategories = () => {\r\n    return new Promise((resolve, reject) => {\r\n        $.ajax({\r\n            url: `${apiUrl}/categories`,\r\n            type: 'GET',\r\n            success: resolve,\r\n            error: reject\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * @description Get questions\r\n * @param page\r\n * @returns {Promise<any>}\r\n */\r\nexport const getQuestions = (page) => {\r\n    return new Promise((resolve, reject) => {\r\n        $.ajax({\r\n            url: `${apiUrl}/questions?page=${page}`,\r\n            type: 'GET',\r\n            success: resolve,\r\n            error: reject\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * @description Search questions\r\n * @param searchTerm\r\n * @returns {Promise<any>}\r\n */\r\nexport const searchQuestions = (searchTerm) => {\r\n    return new Promise((resolve, reject) => {\r\n        $.ajax({\r\n            url: `${apiUrl}/questions`,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                searchTerm\r\n            }),\r\n            success: resolve,\r\n            error: reject\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * @description Create question\r\n * @param question\r\n * @returns {Promise<any>}\r\n */\r\nexport const createQuestion = (question) => {\r\n    return new Promise((resolve, reject) => {\r\n        $.ajax({\r\n            url: `${apiUrl}/questions`,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify(question),\r\n            success: resolve,\r\n            error: reject\r\n        })\r\n    });\r\n};\r\n\r\n/**\r\n * @description Get category questions\r\n * @param categoryId\r\n * @returns {Promise<any>}\r\n */\r\nexport const getCategoryQuestions = (categoryId) => {\r\n    return new Promise((resolve, reject) => {\r\n        $.ajax({\r\n            url: `${apiUrl}/categories/${categoryId}/questions`,\r\n            type: 'GET',\r\n            success: resolve,\r\n            error: reject\r\n        });\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}